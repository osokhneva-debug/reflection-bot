import os
import asyncio
import logging
from datetime import datetime, timezone
import pytz
from telegram import Update
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes
import json

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (–≤ —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö)
user_data = {}

class ReflectionBot:
    def __init__(self):
        self.moscow_tz = pytz.timezone('Europe/Moscow')
        
    async def start(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
        user_id = update.effective_user.id
        
        if user_id not in user_data:
            user_data[user_id] = {
                'reflections': [],
                'timezone': 'Europe/Moscow'
            }
        
        welcome_message = """
üåü –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç–∞ –¥–ª—è —Ä–µ—Ñ–ª–µ–∫—Å–∏–∏!

–Ø –ø–æ–º–æ–≥—É –≤–∞–º –≤–µ—Å—Ç–∏ –¥–Ω–µ–≤–Ω–∏–∫ –∏ —Ä–∞–∑–º—ã—à–ª—è—Ç—å –æ –ø—Ä–æ–∂–∏—Ç–æ–º –¥–Ω–µ.

–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:
/start - –Ω–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º
/help - –ø–æ–∫–∞–∑–∞—Ç—å —Å–ø—Ä–∞–≤–∫—É
/reflection - –¥–æ–±–∞–≤–∏—Ç—å —Ä–µ—Ñ–ª–µ–∫—Å–∏—é –¥–Ω—è
/today - –ø–æ–∫–∞–∑–∞—Ç—å —Ä–µ—Ñ–ª–µ–∫—Å–∏–∏ –∑–∞ —Å–µ–≥–æ–¥–Ω—è
/stats - —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≤–∞—à–∏—Ö —Ä–µ—Ñ–ª–µ–∫—Å–∏–π

–ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ –º–Ω–µ —Å–≤–æ–∏ –º—ã—Å–ª–∏ –æ –¥–Ω–µ, –∏ —è —Å–æ—Ö—Ä–∞–Ω—é –∏—Ö!
        """
        
        await update.message.reply_text(welcome_message)

    async def help_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help"""
        help_text = """
üìã –ö–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞:

/start - –Ω–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º
/help - –ø–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É
/reflection - –¥–æ–±–∞–≤–∏—Ç—å —Ä–µ—Ñ–ª–µ–∫—Å–∏—é –¥–Ω—è
/today - –ø–æ–∫–∞–∑–∞—Ç—å —Ä–µ—Ñ–ª–µ–∫—Å–∏–∏ –∑–∞ —Å–µ–≥–æ–¥–Ω—è
/stats - –ø–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É

üí° –ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è:
- –ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ —Å–≤–æ–∏ –º—ã—Å–ª–∏ –æ –¥–Ω–µ
- –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /reflection –¥–ª—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–π —Ä–µ—Ñ–ª–µ–∫—Å–∏–∏
- –ü—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞–π—Ç–µ —Å–≤–æ–∏ –∑–∞–ø–∏—Å–∏ –∫–æ–º–∞–Ω–¥–æ–π /today

–ë–æ—Ç —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –≤—Å–µ –≤–∞—à–∏ –∑–∞–ø–∏—Å–∏ –∏ –ø–æ–º–æ–≥–∞–µ—Ç –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å!
        """
        await update.message.reply_text(help_text)

    async def reflection_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /reflection"""
        reflection_prompt = """
ü§î –í—Ä–µ–º—è –¥–ª—è —Ä–µ—Ñ–ª–µ–∫—Å–∏–∏! –û—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ –Ω–µ—Å–∫–æ–ª—å–∫–æ –≤–æ–ø—Ä–æ—Å–æ–≤:

1. –ß—Ç–æ —Ö–æ—Ä–æ—à–µ–≥–æ –ø—Ä–æ–∏–∑–æ—à–ª–æ —Å–µ–≥–æ–¥–Ω—è?
2. –ß–µ–º—É —è –Ω–∞—É—á–∏–ª—Å—è(–∞—Å—å) —Å–µ–≥–æ–¥–Ω—è?
3. –ó–∞ —á—Ç–æ —è –±–ª–∞–≥–æ–¥–∞—Ä–µ–Ω(–Ω–∞) —Å–µ–≥–æ–¥–Ω—è?
4. –ß—Ç–æ –º–æ–∂–Ω–æ —É–ª—É—á—à–∏—Ç—å –∑–∞–≤—Ç—Ä–∞?
5. –ö–∞–∫–æ–µ —É –º–µ–Ω—è —Å–µ–π—á–∞—Å –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ –∏ –ø–æ—á–µ–º—É?

–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–≤–æ–∏ —Ä–∞–∑–º—ã—à–ª–µ–Ω–∏—è –æ–¥–Ω–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º, —è —Å–æ—Ö—Ä–∞–Ω—é –∏—Ö –∫–∞–∫ —Ä–µ—Ñ–ª–µ–∫—Å–∏—é –¥–Ω—è.
        """
        await update.message.reply_text(reflection_prompt)

    async def today_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        """–ü–æ–∫–∞–∑–∞—Ç—å —Ä–µ—Ñ–ª–µ–∫—Å–∏–∏ –∑–∞ —Å–µ–≥–æ–¥–Ω—è"""
        user_id = update.effective_user.id
        
        if user_id not in user_data:
            user_data[user_id] = {'reflections': [], 'timezone': 'Europe/Moscow'}
            
        today = datetime.now(self.moscow_tz).date()
        today_reflections = [
            r for r in user_data[user_id]['reflections'] 
            if datetime.fromisoformat(r['timestamp']).date() == today
        ]
        
        if not today_reflections:
            await update.message.reply_text("üìù –°–µ–≥–æ–¥–Ω—è —É –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–ø–∏—Å–µ–π. –ù–∞–ø–∏—à–∏—Ç–µ —á—Ç–æ-–Ω–∏–±—É–¥—å!")
            return
            
        message = f"üìÖ –í–∞—à–∏ —Ä–∞–∑–º—ã—à–ª–µ–Ω–∏—è –∑–∞ {today.strftime('%d.%m.%Y')}:\n\n"
        
        for i, reflection in enumerate(today_reflections, 1):
            time = datetime.fromisoformat(reflection['timestamp']).strftime('%H:%M')
            message += f"üïê {time}\n{reflection['text']}\n\n"
            
        await update.message.reply_text(message)

    async def stats_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        """–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Ä–µ—Ñ–ª–µ–∫—Å–∏–π"""
        user_id = update.effective_user.id
        
        if user_id not in user_data or not user_data[user_id]['reflections']:
            await update.message.reply_text("üìä –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–ø–∏—Å–µ–π –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏.")
            return
            
        reflections = user_data[user_id]['reflections']
        total_count = len(reflections)
        
        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ –¥–Ω—è–º
        days = set()
        for reflection in reflections:
            date = datetime.fromisoformat(reflection['timestamp']).date()
            days.add(date)
            
        unique_days = len(days)
        
        if reflections:
            first_date = min(datetime.fromisoformat(r['timestamp']).date() for r in reflections)
            last_date = max(datetime.fromisoformat(r['timestamp']).date() for r in reflections)
            
            stats_message = f"""
üìä –í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ä–µ—Ñ–ª–µ–∫—Å–∏–π:

üìù –í—Å–µ–≥–æ –∑–∞–ø–∏—Å–µ–π: {total_count}
üìÖ –î–Ω–µ–π —Å –∑–∞–ø–∏—Å—è–º–∏: {unique_days}
üóì –ü–µ—Ä–≤–∞—è –∑–∞–ø–∏—Å—å: {first_date.strftime('%d.%m.%Y')}
üóì –ü–æ—Å–ª–µ–¥–Ω—è—è –∑–∞–ø–∏—Å—å: {last_date.strftime('%d.%m.%Y')}

–ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –≤ —Ç–æ–º –∂–µ –¥—É—Ö–µ! üí™
            """
        else:
            stats_message = "üìä –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–ø–∏—Å–µ–π –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏."
            
        await update.message.reply_text(stats_message)

    async def handle_message(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
        user_id = update.effective_user.id
        message_text = update.message.text
        
        if user_id not in user_data:
            user_data[user_id] = {'reflections': [], 'timezone': 'Europe/Moscow'}
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ—Ñ–ª–µ–∫—Å–∏—é
        now = datetime.now(self.moscow_tz)
        reflection = {
            'text': message_text,
            'timestamp': now.isoformat(),
            'date': now.date().isoformat()
        }
        
        user_data[user_id]['reflections'].append(reflection)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
        confirmation_message = f"""
‚úÖ –í–∞—à–∞ —Ä–µ—Ñ–ª–µ–∫—Å–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞!

üïê –í—Ä–µ–º—è: {now.strftime('%H:%M, %d.%m.%Y')}
üìù –ó–∞–ø–∏—Å–µ–π —Å–µ–≥–æ–¥–Ω—è: {len([r for r in user_data[user_id]['reflections'] if r['date'] == now.date().isoformat()])}

–°–ø–∞—Å–∏–±–æ –∑–∞ —Ç–æ, —á—Ç–æ –¥–µ–ª–∏—Ç–µ—Å—å —Å–≤–æ–∏–º–∏ –º—ã—Å–ª—è–º–∏! üôè
        """
        
        await update.message.reply_text(confirmation_message)

async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –±–æ—Ç–∞ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
    bot_token = os.getenv('BOT_TOKEN')
    if not bot_token:
        logger.error("BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")
        return
    
    # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
    application = Application.builder().token(bot_token).build()
    
    # –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞
    bot = ReflectionBot()
    
    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
    application.add_handler(CommandHandler("start", bot.start))
    application.add_handler(CommandHandler("help", bot.help_command))
    application.add_handler(CommandHandler("reflection", bot.reflection_command))
    application.add_handler(CommandHandler("today", bot.today_command))
    application.add_handler(CommandHandler("stats", bot.stats_command))
    
    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, bot.handle_message))
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    logger.info("–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞...")
    
    # –î–ª—è –¥–µ–ø–ª–æ—è –Ω–∞ Render –∏—Å–ø–æ–ª—å–∑—É–µ–º webhook
    PORT = int(os.environ.get('PORT', 8443))
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ webhook –¥–ª—è –¥–µ–ø–ª–æ—è
    webhook_url = os.getenv('WEBHOOK_URL')  # URL –≤–∞—à–µ–≥–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –Ω–∞ Render
    
    if webhook_url:
        logger.info(f"–ó–∞–ø—É—Å–∫ —Å webhook –Ω–∞ –ø–æ—Ä—Ç—É {PORT}")
        await application.bot.set_webhook(url=f"{webhook_url}/webhook")
        application.run_webhook(
            listen="0.0.0.0",
            port=PORT,
            webhook_url=f"{webhook_url}/webhook",
            secret_token="your-secret-token"
        )
    else:
        logger.info("–ó–∞–ø—É—Å–∫ –≤ —Ä–µ–∂–∏–º–µ polling")
        await application.run_polling()

if __name__ == '__main__':
    asyncio.run(main())
