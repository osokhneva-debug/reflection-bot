import asyncio
import logging
import json
import os
from datetime import datetime, time, timedelta
from typing import Dict, List, Optional
import sqlite3
from dataclasses import dataclass, asdict
import random

from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, BotCommand
from telegram.ext import (
    Application, 
    CommandHandler, 
    MessageHandler, 
    CallbackQueryHandler,
    ContextTypes, 
    filters
)
from apscheduler.schedulers.asyncio import AsyncIOScheduler
from apscheduler.triggers.cron import CronTrigger

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s', 
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
BOT_TOKEN = '8343261083:AAFDsi3V2yv3dduTx3KzucIjYedhTOyDoLs'
DATABASE_PATH = 'reflections.db'

@dataclass
class DailyReflection:
    date: str
    user_id: int
    best_moment: Optional[str] = None
    gratitude: Optional[str] = None
    day_rating: Optional[int] = None
    tomorrow_focus: Optional[str] = None
    response_time: Optional[str] = None
    mood_context: Optional[str] = None

class DialogState:
    WAITING_BEST_MOMENT = "waiting_best_moment"
    WAITING_GRATITUDE = "waiting_gratitude" 
    WAITING_RATING = "waiting_rating"
    WAITING_TOMORROW = "waiting_tomorrow"
    COMPLETED = "completed"

class ReflectionBot:
    def __init__(self, token: str):
        self.token = token
        self.application = None
        self.scheduler = AsyncIOScheduler()
        self.init_database()
        
        # –ë–∞–Ω–∫ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–π
        self.greetings = {
            'classic': [
                "–ü—Ä–∏–≤–µ—Ç! –ö–∞–∫ –ø—Ä–æ—à—ë–ª —Ç–≤–æ–π –¥–µ–Ω—å? üåô",
                "–í—Ä–µ–º—è –¥–ª—è –≤–µ—á–µ—Ä–Ω–µ–π —Ä–µ—Ñ–ª–µ–∫—Å–∏–∏ ‚ú®",
                "–î–µ–Ω—å –∑–∞–≤–µ—Ä—à–∞–µ—Ç—Å—è... –ø–æ–¥–µ–ª–∏—Å—å –º—ã—Å–ª—è–º–∏! üí≠"
            ],
            'weekday': {
                0: "–ù–æ–≤–∞—è –Ω–µ–¥–µ–ª—è –Ω–∞—á–∞–ª–∞—Å—å, –∫–∞–∫ –ø–µ—Ä–≤—ã–π –¥–µ–Ω—å?",
                4: "–ù–µ–¥–µ–ª—è –±–ª–∏–∑–∏—Ç—Å—è –∫ –∫–æ–Ω—Ü—É!",
                5: "–ö–∞–∫ –ø—Ä–æ–≤–æ–¥–∏—à—å –≤—ã—Ö–æ–¥–Ω–æ–π?",
                6: "–ö–∞–∫ –ø—Ä–æ–≤–æ–¥–∏—à—å –≤—ã—Ö–æ–¥–Ω–æ–π?"
            },
            'seasonal': [
                "–£—é—Ç–Ω—ã–π –∑–∏–º–Ω–∏–π –≤–µ—á–µ—Ä –¥–ª—è —Ä–∞–∑–º—ã—à–ª–µ–Ω–∏–π",
                "–î–æ–∂–¥–ª–∏–≤—ã–π –¥–µ–Ω—å —Ä–∞—Å–ø–æ–ª–∞–≥–∞–µ—Ç –∫ —Ä–µ—Ñ–ª–µ–∫—Å–∏–∏", 
                "–°–æ–ª–Ω–µ—á–Ω—ã–π –¥–µ–Ω—å –∑–∞–≤–µ—Ä—à–∞–µ—Ç—Å—è"
            ]
        }
        
        # –°–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è –¥–∏–∞–ª–æ–≥–∞
        self.user_states = {}
        
        # –í–æ–ø—Ä–æ—Å—ã –¥–ª—è –¥–∏–∞–ª–æ–≥–∞
        self.dialog_questions = {
            DialogState.WAITING_BEST_MOMENT: {
                'question': "–ß—Ç–æ —Å–∞–º–æ–µ —Ü–µ–Ω–Ω–æ–µ –ø—Ä–æ–∏–∑–æ—à–ª–æ —Å–µ–≥–æ–¥–Ω—è? ‚ú®\n\n–ü–æ–¥–µ–ª–∏—Å—å —Ö–æ—Ç—è –±—ã –æ–¥–Ω–∏–º –º–æ–º–µ–Ω—Ç–æ–º, –∫–æ—Ç–æ—Ä—ã–π –ø–æ—Ä–∞–¥–æ–≤–∞–ª –∏–ª–∏ –∑–∞–ø–æ–º–Ω–∏–ª—Å—è:",
                'next_state': DialogState.WAITING_GRATITUDE
            },
            DialogState.WAITING_GRATITUDE: {
                'question': "–ü–æ–Ω—è–ª! –ê —Ç–µ–ø–µ—Ä—å –æ –±–ª–∞–≥–æ–¥–∞—Ä–Ω–æ—Å—Ç–∏ üíõ\n\n–ö–æ–º—É –∏–ª–∏ –∑–∞ —á—Ç–æ —Ç—ã —Å–µ–≥–æ–¥–Ω—è –±–ª–∞–≥–æ–¥–∞—Ä–µ–Ω/–±–ª–∞–≥–æ–¥–∞—Ä–Ω–∞?",
                'next_state': DialogState.WAITING_RATING
            },
            DialogState.WAITING_RATING: {
                'question': "–û—Ç–ª–∏—á–Ω–æ! üìä\n\n–ê —Ç–µ–ø–µ—Ä—å –æ—Ü–µ–Ω–∏ –¥–µ–Ω—å –æ—Ç 1 –¥–æ 10 - –∫–∞–∫ –ø—Ä–æ—à—ë–ª —ç—Ç–æ—Ç –¥–µ–Ω—å –≤ —Ü–µ–ª–æ–º?",
                'next_state': DialogState.WAITING_TOMORROW
            },
            DialogState.WAITING_TOMORROW: {
                'question': "–ò –ø–æ—Å–ª–µ–¥–Ω–∏–π –≤–æ–ø—Ä–æ—Å! üéØ\n\n–ß—Ç–æ –≥–ª–∞–≤–Ω–æ–µ —Ö–æ—á–µ—à—å —Å–¥–µ–ª–∞—Ç—å –∏–ª–∏ –Ω–∞ —á—ë–º —Å–æ—Å—Ä–µ–¥–æ—Ç–æ—á–∏—Ç—å—Å—è –∑–∞–≤—Ç—Ä–∞?",
                'next_state': DialogState.COMPLETED
            }
        }
    
    def init_database(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
        conn = sqlite3.connect(DATABASE_PATH)
        cursor = conn.cursor()
        
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS reflections (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                date TEXT,
                user_id INTEGER,
                best_moment TEXT,
                gratitude TEXT,
                day_rating INTEGER,
                tomorrow_focus TEXT,
                response_time TEXT,
                mood_context TEXT,
                created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
            )
        ''')
        
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS users (
                user_id INTEGER PRIMARY KEY,
                timezone TEXT DEFAULT 'UTC',
                created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
            )
        ''')
        
        conn.commit()
        conn.close()
    
    def save_reflection(self, reflection: DailyReflection):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ—Ñ–ª–µ–∫—Å–∏–∏ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö"""
        conn = sqlite3.connect(DATABASE_PATH)
        cursor = conn.cursor()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –∑–∞–ø–∏—Å—å –∑–∞ —ç—Ç–æ—Ç –¥–µ–Ω—å
        cursor.execute(
            'SELECT id FROM reflections WHERE date = ? AND user_id = ?',
            (reflection.date, reflection.user_id)
        )
        existing = cursor.fetchone()
        
        if existing:
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –∑–∞–ø–∏—Å—å
            cursor.execute('''
                UPDATE reflections 
                SET best_moment = COALESCE(?, best_moment),
                    gratitude = COALESCE(?, gratitude),
                    day_rating = COALESCE(?, day_rating),
                    tomorrow_focus = COALESCE(?, tomorrow_focus),
                    response_time = COALESCE(?, response_time),
                    mood_context = COALESCE(?, mood_context)
                WHERE id = ?
            ''', (*[getattr(reflection, field) for field in 
                   ['best_moment', 'gratitude', 'day_rating', 'tomorrow_focus', 
                    'response_time', 'mood_context']], existing[0]))
        else:
            # –°–æ–∑–¥–∞—ë–º –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å
            cursor.execute('''
                INSERT INTO reflections 
                (date, user_id, best_moment, gratitude, day_rating, tomorrow_focus, response_time, mood_context)
                VALUES (?, ?, ?, ?, ?, ?, ?, ?)
            ''', (reflection.date, reflection.user_id, reflection.best_moment,
                  reflection.gratitude, reflection.day_rating, reflection.tomorrow_focus,
                  reflection.response_time, reflection.mood_context))
        
        conn.commit()
        conn.close()
    
    def get_user_reflections(self, user_id: int, days: int = 7) -> List[Dict]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–µ—Ñ–ª–µ–∫—Å–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ –¥–Ω–∏"""
        conn = sqlite3.connect(DATABASE_PATH)
        cursor = conn.cursor()
        
        end_date = datetime.now().date()
        start_date = end_date - timedelta(days=days-1)
        
        cursor.execute('''
            SELECT * FROM reflections 
            WHERE user_id = ? AND date BETWEEN ? AND ?
            ORDER BY date DESC
        ''', (user_id, start_date.isoformat(), end_date.isoformat()))
        
        columns = [description[0] for description in cursor.description]
        results = [dict(zip(columns, row)) for row in cursor.fetchall()]
        
        conn.close()
        return results
    
    def get_user_diary(self, user_id: int, limit: int = 30) -> List[Dict]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ –∫–∞–∫ –¥–Ω–µ–≤–Ω–∏–∫–∞ (–≤—Å–µ –∑–∞–ø–∏—Å–∏ –ø–æ–¥—Ä—è–¥ –ø–æ –¥–∞—Ç–∞–º)"""
        conn = sqlite3.connect(DATABASE_PATH)
        cursor = conn.cursor()
        
        cursor.execute('''
            SELECT * FROM reflections 
            WHERE user_id = ?
            ORDER BY date DESC
            LIMIT ?
        ''', (user_id, limit))
        
        columns = [description[0] for description in cursor.description]
        results = [dict(zip(columns, row)) for row in cursor.fetchall()]
        
        conn.close()
        return results
    
    def format_diary_entry(self, reflection: Dict) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–¥–Ω–æ–π –∑–∞–ø–∏—Å–∏ –¥–Ω–µ–≤–Ω–∏–∫–∞"""
        date_obj = datetime.strptime(reflection['date'], '%Y-%m-%d')
        formatted_date = date_obj.strftime('%d.%m.%Y')
        weekday_names = ['–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫', '–í—Ç–æ—Ä–Ω–∏–∫', '–°—Ä–µ–¥–∞', '–ß–µ—Ç–≤–µ—Ä–≥', '–ü—è—Ç–Ω–∏—Ü–∞', '–°—É–±–±–æ—Ç–∞', '–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ']
        weekday = weekday_names[date_obj.weekday()]
        
        entry = f"üìÖ **{formatted_date} ({weekday})**\n\n"
        
        if reflection['best_moment']:
            entry += f"‚ú® **–õ—É—á—à–∏–π –º–æ–º–µ–Ω—Ç:**\n{reflection['best_moment']}\n\n"
        
        if reflection['gratitude']:
            entry += f"üíõ **–ë–ª–∞–≥–æ–¥–∞—Ä–Ω–æ—Å—Ç—å:**\n{reflection['gratitude']}\n\n"
        
        if reflection['day_rating']:
            rating_emoji = "üí™" if reflection['day_rating'] >= 7 else "üíô" if reflection['day_rating'] >= 5 else "ü´Ç"
            entry += f"üìä **–û—Ü–µ–Ω–∫–∞ –¥–Ω—è:** {reflection['day_rating']}/10 {rating_emoji}\n\n"
        
        if reflection['tomorrow_focus']:
            entry += f"üéØ **–ü–ª–∞–Ω—ã –Ω–∞ –∑–∞–≤—Ç—Ä–∞:**\n{reflection['tomorrow_focus']}\n\n"
        
        return entry + "‚îÄ" * 30 + "\n\n"
    
    def get_greeting(self) -> str:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è —Å —É—á—ë—Ç–æ–º –¥–Ω—è –Ω–µ–¥–µ–ª–∏"""
        today = datetime.now()
        weekday = today.weekday()
        
        # –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω—ã—Ö –¥–Ω–µ–π
        if weekday in self.greetings['weekday']:
            return self.greetings['weekday'][weekday]
        
        # –°–ª—É—á–∞–π–Ω–æ–µ –∫–ª–∞—Å—Å–∏—á–µ—Å–∫–æ–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ
        return random.choice(self.greetings['classic'])
    
    def get_initial_message(self, rating: Optional[int] = None) -> str:
        """–§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞—á–∞–ª—å–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è —Ä–µ—Ñ–ª–µ–∫—Å–∏–∏"""
        greeting = self.get_greeting()
        today_date = datetime.now().strftime("%d.%m.%Y")
        
        # –ê–¥–∞–ø—Ç–∞—Ü–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –ø—Ä–µ–¥—ã–¥—É—â–µ–π –æ—Ü–µ–Ω–∫–∏
        if rating and rating <= 4:
            message = f"""–î–æ–±—Ä–æ–π –Ω–æ—á–∏! üíô

üìÖ {today_date}

–ß—É–≤—Å—Ç–≤—É—é, —á—Ç–æ –≤—á–µ—Ä–∞ –±—ã–ª–æ –Ω–µ–ø—Ä–æ—Å—Ç–æ. –ù–æ —Ç—ã —Å–ø—Ä–∞–≤–∏–ª—Å—è - —ç—Ç–æ —É–∂–µ –ø–æ–±–µ–¥–∞!

–î–∞–≤–∞–π –Ω–∞–π–¥—ë–º —Ö–æ—Ç—å –º–∞–ª–µ–Ω—å–∫–∏–µ —Å–≤–µ—Ç–ª—ã–µ –º–æ–º–µ–Ω—Ç—ã –≤ —Å–µ–≥–æ–¥–Ω—è—à–Ω–µ–º –¥–Ω–µ..."""
        
        elif rating and rating >= 8:
            message = f"""{greeting}

üìÖ {today_date}

–ß—É–≤—Å—Ç–≤—É—é —Ç–≤–æ—é —Ö–æ—Ä–æ—à—É—é —ç–Ω–µ—Ä–≥–∏—é! üåü

–†–∞—Å—Å–∫–∞–∂–∏ –º–Ω–µ –æ–± —ç—Ç–æ–º –¥–Ω–µ..."""
        
        else:
            message = f"""{greeting}

üìÖ {today_date}

–í—Ä–µ–º—è –¥–ª—è –Ω–∞—à–µ–π –≤–µ—á–µ—Ä–Ω–µ–π —Ç—Ä–∞–¥–∏—Ü–∏–∏! –†–∞—Å—Å–∫–∞–∂–∏ –º–Ω–µ –æ–± —ç—Ç–æ–º –¥–Ω–µ..."""
        
        return message
    
    def generate_weekly_analytics(self, user_id: int) -> str:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ–π –∞–Ω–∞–ª–∏—Ç–∏–∫–∏"""
        reflections = self.get_user_reflections(user_id, 7)
        
        if not reflections:
            return "–ü—Ä–∏–≤–µ—Ç! –ù–∞ —ç—Ç–æ–π –Ω–µ–¥–µ–ª–µ –º—ã –µ—â—ë –Ω–µ –æ–±—â–∞–ª–∏—Å—å. –ù–∞—á–Ω—ë–º –Ω–æ–≤—É—é —Ç—Ä–∞–¥–∏—Ü–∏—é? ‚ú®"
        
        # –ü–æ–¥—Å—á—ë—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        ratings = [r['day_rating'] for r in reflections if r['day_rating']]
        avg_rating = sum(ratings) / len(ratings) if ratings else 0
        high_days = len([r for r in ratings if r >= 7])
        
        # –¢–æ–ø –º–æ–º–µ–Ω—Ç—ã
        best_moments = [r['best_moment'] for r in reflections if r['best_moment']][:2]
        
        # –ê–Ω–∞–ª–∏–∑ –±–ª–∞–≥–æ–¥–∞—Ä–Ω–æ—Å—Ç–µ–π
        gratitudes = [r['gratitude'] for r in reflections if r['gratitude']]
        
        # –ü–ª–∞–Ω—ã
        plans = [r['tomorrow_focus'] for r in reflections if r['tomorrow_focus']]
        
        week_start = (datetime.now() - timedelta(days=6)).strftime("%d.%m")
        week_end = datetime.now().strftime("%d.%m.%Y")
        
        message = f"""–ü—Ä–∏–≤–µ—Ç! –ù–µ–¥–µ–ª—è –ø–æ–¥–æ—à–ª–∞ –∫ –∫–æ–Ω—Ü—É ‚ú®

üìÖ –ù–ï–î–ï–õ–Ø {week_start} - {week_end}

üìä –ù–ï–î–ï–õ–Ø –í –¶–ò–§–†–ê–•:
–°—Ä–µ–¥–Ω—è—è –æ—Ü–µ–Ω–∫–∞: {avg_rating:.1f}/10
–î–Ω–µ–π –≤—ã—à–µ 7: {high_days} –∏–∑ {len(ratings)}
–í—Å–µ–≥–æ –∑–∞–ø–∏—Å–µ–π: {len(reflections)}

üåü –¢–û–ü-–ú–û–ú–ï–ù–¢–´ –ù–ï–î–ï–õ–ò:"""
        
        for i, moment in enumerate(best_moments, 1):
            message += f"\n‚Ä¢ {moment}"
        
        if gratitudes:
            message += f"\n\nüíõ –ë–õ–ê–ì–û–î–ê–†–ù–û–°–¢–ò:\n–í—Å–µ–≥–æ —É–ø–æ–º–∏–Ω–∞–Ω–∏–π: {len(gratitudes)}"
        
        if plans:
            message += f"\n\nüéØ –ü–õ–ê–ù–´ –ò –î–û–°–¢–ò–ñ–ï–ù–ò–Ø:\n–ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ —Ü–µ–ª–µ–π: {len(plans)}"
        
        message += "\n\n‚ú® –ù–ê –ù–û–í–£–Æ –ù–ï–î–ï–õ–Æ:\n–ü—Ä–æ–¥–æ–ª–∂–∞–π –∑–∞–º–µ—á–∞—Ç—å —Ö–æ—Ä–æ—à–µ–µ –≤ –∫–∞–∂–¥–æ–º –¥–Ω–µ! –¢—ã –º–æ–ª–æ–¥–µ—Ü!"
        
        return message
    
    async def setup_bot_commands(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –º–µ–Ω—é –∫–æ–º–∞–Ω–¥ –±–æ—Ç–∞"""
        commands = [
            BotCommand("start", "üåü –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º"),
            BotCommand("reflect", "üí≠ –ù–∞—á–∞—Ç—å –¥–∏–∞–ª–æ–≥ —Ä–µ—Ñ–ª–µ–∫—Å–∏–∏"),
            BotCommand("diary", "üìñ –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –º–æ–π –¥–Ω–µ–≤–Ω–∏–∫"),
            BotCommand("analytics", "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ –Ω–µ–¥–µ–ª—é"),
            BotCommand("help", "‚ùì –ü–æ–º–æ—â—å")
        ]
        
        await self.application.bot.set_my_commands(commands)
    
    async def start_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
        user_id = update.effective_user.id
        
        # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        conn = sqlite3.connect(DATABASE_PATH)
        cursor = conn.cursor()
        cursor.execute(
            'INSERT OR IGNORE INTO users (user_id, created_at) VALUES (?, ?)',
            (user_id, datetime.now().isoformat())
        )
        conn.commit()
        conn.close()
        
        welcome_message = """–ü—Ä–∏–≤–µ—Ç! üåü

–Ø —Ç–≤–æ–π –ø–æ–º–æ—â–Ω–∏–∫ –¥–ª—è –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–π —Ä–µ—Ñ–ª–µ–∫—Å–∏–∏. –ö–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ 23:00 —è –±—É–¥—É –∑–∞–¥–∞–≤–∞—Ç—å —Ç–µ–±–µ –≤–æ–ø—Ä–æ—Å—ã –æ –¥–Ω–µ, –∏ –º—ã –±—É–¥–µ–º –≤–µ—Å—Ç–∏ –Ω–∞—Å—Ç–æ—è—â–∏–π –¥–∏–∞–ª–æ–≥!

üó£ –ö–ê–ö –≠–¢–û –†–ê–ë–û–¢–ê–ï–¢:
‚Ä¢ –Ø –∑–∞–¥–∞—é –≤–æ–ø—Ä–æ—Å
‚Ä¢ –¢—ã –æ—Ç–≤–µ—á–∞–µ—à—å 
‚Ä¢ –Ø –ø–µ—Ä–µ—Ö–æ–∂—É –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –≤–æ–ø—Ä–æ—Å—É
‚Ä¢ –ò —Ç–∞–∫ –ø–æ–∫–∞ –Ω–µ –æ–±—Å—É–¥–∏–º –≤–µ—Å—å –¥–µ–Ω—å!

üí¨ –ú–û–ò –í–û–ü–†–û–°–´:
‚Ä¢ –û –ª—É—á—à–µ–º –º–æ–º–µ–Ω—Ç–µ –¥–Ω—è ‚ú®
‚Ä¢ –û –±–ª–∞–≥–æ–¥–∞—Ä–Ω–æ—Å—Ç–∏ üíõ  
‚Ä¢ –û—Ü–µ–Ω–∫–∞ –¥–Ω—è –æ—Ç 1 –¥–æ 10 üìä
‚Ä¢ –ü–ª–∞–Ω—ã –Ω–∞ –∑–∞–≤—Ç—Ä–∞ üéØ

üìÖ –ê –ø–æ –≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å—è–º - –∞–Ω–∞–ª–∏—Ç–∏–∫–∞ –Ω–µ–¥–µ–ª–∏ —Å –¥–∞—Ç–∞–º–∏!

üì± **–ö–û–ú–ê–ù–î–´ –í –ú–ï–ù–Æ:**
üí≠ /reflect - –Ω–∞—á–∞—Ç—å –¥–∏–∞–ª–æ–≥ –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å
üìñ /diary - –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–≤–æ–π –¥–Ω–µ–≤–Ω–∏–∫
üìä /analytics - —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ –Ω–µ–¥–µ–ª—é  
‚ùì /help - –ø–æ–¥—Ä–æ–±–Ω–∞—è —Å–ø—Ä–∞–≤–∫–∞

–í—Å–µ –∫–æ–º–∞–Ω–¥—ã —Ç–µ–ø–µ—Ä—å –¥–æ—Å—Ç—É–ø–Ω—ã –≤ –º–µ–Ω—é –≤–Ω–∏–∑—É! üëá

–ì–æ—Ç–æ–≤ –∫ –∂–∏–≤–æ–º—É –æ–±—â–µ–Ω–∏—é? üòä"""
        
        await update.message.reply_text(welcome_message)
    
    async def reflect_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–†—É—á–Ω–æ–π –∑–∞–ø—É—Å–∫ —Ä–µ—Ñ–ª–µ–∫—Å–∏–∏"""
        user_id = update.effective_user.id
        await self.start_reflection_dialog(user_id, update.message.chat_id)
    
    async def diary_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–∫–∞–∑–∞—Ç—å –¥–Ω–µ–≤–Ω–∏–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        user_id = update.effective_user.id
        diary_entries = self.get_user_diary(user_id, 30)  # –ü–æ—Å–ª–µ–¥–Ω–∏–µ 30 –∑–∞–ø–∏—Å–µ–π
        
        if not diary_entries:
            message = """üìñ **–ú–û–ô –î–ù–ï–í–ù–ò–ö**

–ü–æ–∫–∞ –∑–¥–µ—Å—å –ø—É—Å—Ç–æ... üå±

–ù–∞—á–Ω–∏ –≤–µ—Å—Ç–∏ –¥–Ω–µ–≤–Ω–∏–∫ —Ä–∞–∑–º—ã—à–ª–µ–Ω–∏–π —É–∂–µ —Å–µ–≥–æ–¥–Ω—è! –ù–∞–ø–∏—à–∏ /reflect –∏–ª–∏ –¥–æ–∂–¥–∏—Å—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ 23:00.

–ö–∞–∂–¥—ã–π –¥–µ–Ω—å - —ç—Ç–æ –Ω–æ–≤–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ —Ç–≤–æ–µ–π –∏—Å—Ç–æ—Ä–∏–∏! ‚ú®"""
            
            await update.message.reply_text(message)
            return
        
        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ –º–µ—Å—è—Ü–∞–º –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞
        current_month = ""
        diary_text = "üìñ **–ú–û–ô –î–ù–ï–í–ù–ò–ö –†–ê–ó–ú–´–®–õ–ï–ù–ò–ô**\n\n"
        
        for entry in reversed(diary_entries[-10:]):  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 10 –∑–∞–ø–∏—Å–µ–π –≤ —Ö—Ä–æ–Ω–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–º –ø–æ—Ä—è–¥–∫–µ
            entry_date = datetime.strptime(entry['date'], '%Y-%m-%d')
            entry_month = entry_date.strftime('%B %Y')
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ –º–µ—Å—è—Ü–∞
            if entry_month != current_month:
                diary_text += f"üóì **{entry_month.upper()}**\n\n"
                current_month = entry_month
            
            diary_text += self.format_diary_entry(entry)
        
        # –ï—Å–ª–∏ –∑–∞–ø–∏—Å–µ–π –±–æ–ª—å—à–µ 10, –¥–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± —ç—Ç–æ–º
        total_entries = len(diary_entries)
        if total_entries > 10:
            diary_text += f"üìö –ò –µ—â—ë {total_entries - 10} –∑–∞–ø–∏—Å–µ–π –≤ —Ç–≤–æ—ë–º –¥–Ω–µ–≤–Ω–∏–∫–µ!\n\n"
        
        diary_text += f"üí´ **–í—Å–µ–≥–æ –∑–∞–ø–∏—Å–µ–π –≤ –¥–Ω–µ–≤–Ω–∏–∫–µ: {total_entries}**\n\n"
        diary_text += "–ü—Ä–æ–¥–æ–ª–∂–∞–π –≤–µ—Å—Ç–∏ –¥–Ω–µ–≤–Ω–∏–∫ —Ä–∞–∑–º—ã—à–ª–µ–Ω–∏–π! –ö–∞–∂–¥–∞—è –∑–∞–ø–∏—Å—å - —ç—Ç–æ —à–∞–≥ –∫ —Å–∞–º–æ–ø–æ–∑–Ω–∞–Ω–∏—é. üåü"
        
        # –†–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ —á–∞—Å—Ç–∏ –µ—Å–ª–∏ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        if len(diary_text) > 4096:
            parts = []
            current_part = "üìñ **–ú–û–ô –î–ù–ï–í–ù–ò–ö –†–ê–ó–ú–´–®–õ–ï–ù–ò–ô**\n\n"
            
            for entry in reversed(diary_entries[-5:]):  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ–Ω—å—à–µ –∑–∞–ø–∏—Å–µ–π
                entry_formatted = self.format_diary_entry(entry)
                if len(current_part + entry_formatted) > 4000:
                    parts.append(current_part)
                    current_part = entry_formatted
                else:
                    current_part += entry_formatted
            
            parts.append(current_part)
            parts[-1] += f"\nüí´ **–í—Å–µ–≥–æ –∑–∞–ø–∏—Å–µ–π: {total_entries}**"
            
            for part in parts:
                await update.message.reply_text(part)
        else:
            await update.message.reply_text(diary_text)
    
    async def start_reflection_dialog(self, user_id: int, chat_id: int):
        """–ù–∞—á–∞–ª–æ –¥–∏–∞–ª–æ–≥–∞ —Ä–µ—Ñ–ª–µ–∫—Å–∏–∏"""
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é –æ—Ü–µ–Ω–∫—É –¥–ª—è –∞–¥–∞–ø—Ç–∞—Ü–∏–∏ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è
        recent_reflections = self.get_user_reflections(user_id, 1)
        last_rating = recent_reflections[0]['day_rating'] if recent_reflections else None
        
        # –°–æ–∑–¥–∞—ë–º –Ω–æ–≤—É—é —Ä–µ—Ñ–ª–µ–∫—Å–∏—é
        today_date = datetime.now().date().isoformat()
        
        self.user_states[user_id] = {
            'dialog_state': DialogState.WAITING_BEST_MOMENT,
            'current_reflection': DailyReflection(
                date=today_date,
                user_id=user_id,
                response_time=datetime.now().isoformat()
            ),
            'chat_id': chat_id
        }
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ
        greeting_message = self.get_initial_message(last_rating)
        
        # –ü–µ—Ä–≤—ã–π –≤–æ–ø—Ä–æ—Å
        first_question = self.dialog_questions[DialogState.WAITING_BEST_MOMENT]['question']
        
        keyboard = [[InlineKeyboardButton("–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å —ç—Ç–æ—Ç –≤–æ–ø—Ä–æ—Å", callback_data="skip_question")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        full_message = f"{greeting_message}\n\n{first_question}"
        
        await self.application.bot.send_message(
            chat_id=chat_id,
            text=full_message,
            reply_markup=reply_markup
        )
    
    async def analytics_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–∫–∞–∑–∞—Ç—å –∞–Ω–∞–ª–∏—Ç–∏–∫—É –∑–∞ –Ω–µ–¥–µ–ª—é"""
        user_id = update.effective_user.id
        analytics = self.generate_weekly_analytics(user_id)
        await update.message.reply_text(analytics)
    
    async def help_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–º–æ—â—å"""
        help_text = """ü§ñ **–ü–û–ú–û–©–¨ –ü–û –ë–û–¢–£ –†–ï–§–õ–ï–ö–°–ò–ò**

–¢–µ–ø–µ—Ä—å –º—ã –≤–µ–¥—ë–º –Ω–∞—Å—Ç–æ—è—â–∏–π –¥–∏–∞–ª–æ–≥! üó£

üïö **–ï–ñ–ï–î–ù–ï–í–ù–û –í 23:00** —è –Ω–∞—á–Ω—É —Ä–∞–∑–≥–æ–≤–æ—Ä:
1. –°–Ω–∞—á–∞–ª–∞ –ø–æ–ø—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é –∏ —Å–ø—Ä–æ—à—É –æ –ª—É—á—à–µ–º –º–æ–º–µ–Ω—Ç–µ –¥–Ω—è ‚ú®
2. –ü–æ—Å–ª–µ —Ç–≤–æ–µ–≥–æ –æ—Ç–≤–µ—Ç–∞ - –æ –±–ª–∞–≥–æ–¥–∞—Ä–Ω–æ—Å—Ç–∏ üíõ
3. –ó–∞—Ç–µ–º –ø–æ–ø—Ä–æ—à—É –æ—Ü–µ–Ω–∏—Ç—å –¥–µ–Ω—å üìä  
4. –ò –Ω–∞–∫–æ–Ω–µ—Ü - –æ –ø–ª–∞–Ω–∞—Ö –Ω–∞ –∑–∞–≤—Ç—Ä–∞ üéØ

üìÖ **–í—Å–µ –∑–∞–ø–∏—Å–∏ —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è —Å –¥–∞—Ç–∞–º–∏ –≤ —Ç–≤–æ–π –ª–∏—á–Ω—ã–π –¥–Ω–µ–≤–Ω–∏–∫!**

üìä **–ü–û –í–û–°–ö–†–ï–°–ï–ù–¨–Ø–ú –í 20:00** - –ø–æ–¥—Ä–æ–±–Ω–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞ –Ω–µ–¥–µ–ª–∏

üì± **–ö–û–ú–ê–ù–î–´ –í –ú–ï–ù–Æ:**
üåü **/start** - –∑–Ω–∞–∫–æ–º—Å—Ç–≤–æ —Å –±–æ—Ç–æ–º
üí≠ **/reflect** - –Ω–∞—á–∞—Ç—å –¥–∏–∞–ª–æ–≥ –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å  
üìñ **/diary** - –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–≤–æ–π –¥–Ω–µ–≤–Ω–∏–∫ —Ä–∞–∑–º—ã—à–ª–µ–Ω–∏–π
üìä **/analytics** - —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ –Ω–µ–¥–µ–ª—é
‚ùì **/help** - —ç—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞

üó£ **–ö–ê–ö –ü–†–û–•–û–î–ò–¢ –î–ò–ê–õ–û–ì:**
‚Ä¢ –û—Ç–≤–µ—á–∞–π –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ, –∫–∞–∫ –±—É–¥—Ç–æ –≥–æ–≤–æ—Ä–∏—à—å —Å –¥—Ä—É–≥–æ–º
‚Ä¢ –ú–æ–∂–µ—à—å –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å –ª—é–±–æ–π –≤–æ–ø—Ä–æ—Å –∫–Ω–æ–ø–∫–æ–π "–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å"
‚Ä¢ –Ø –±—É–¥—É –∂–¥–∞—Ç—å —Ç–≤–æ–µ–≥–æ –æ—Ç–≤–µ—Ç–∞ –∏ –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç—å –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –≤–æ–ø—Ä–æ—Å—É
‚Ä¢ –í –ª—é–±–æ–π –º–æ–º–µ–Ω—Ç –º–æ–∂–µ—à—å –Ω–∞–ø–∏—Å–∞—Ç—å —á—Ç–æ-—Ç–æ —Å–≤–æ—ë - —è –ø–æ–π–º—É!

üìñ **–û –î–ù–ï–í–ù–ò–ö–ï:**
‚Ä¢ –í—Å–µ —Ç–≤–æ–∏ –æ—Ç–≤–µ—Ç—ã —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è –∫–∞–∫ –∑–∞–ø–∏—Å–∏ –¥–Ω–µ–≤–Ω–∏–∫–∞
‚Ä¢ –ú–æ–∂–µ—à—å –≤ –ª—é–±–æ–µ –≤—Ä–µ–º—è –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–≤–æ—é –∏—Å—Ç–æ—Ä–∏—é
‚Ä¢ –ó–∞–ø–∏—Å–∏ –∏–¥—É—Ç –ø–æ –¥–∞—Ç–∞–º, –∫–∞–∫ –Ω–∞—Å—Ç–æ—è—â–∏–π –¥–Ω–µ–≤–Ω–∏–∫
‚Ä¢ –≠—Ç–æ –ø–æ–º–æ–∂–µ—Ç —É–≤–∏–¥–µ—Ç—å —Å–≤–æ–π –ø—Ä–æ–≥—Ä–µ—Å—Å –∏ –ø–∞—Ç—Ç–µ—Ä–Ω—ã

–ñ–∏–≤–æ–µ –æ–±—â–µ–Ω–∏–µ + –ª–∏—á–Ω—ã–π –¥–Ω–µ–≤–Ω–∏–∫ = –ø—É—Ç—å –∫ —Å–∞–º–æ–ø–æ–∑–Ω–∞–Ω–∏—é! üíõ

–í—Å–µ –∫–æ–º–∞–Ω–¥—ã –¥–æ—Å—Ç—É–ø–Ω—ã –≤ –º–µ–Ω—é –≤–Ω–∏–∑—É —ç–∫—Ä–∞–Ω–∞! üëá"""
        
        await update.message.reply_text(help_text)
    
    async def handle_message(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –¥–∏–∞–ª–æ–≥–µ"""
        user_id = update.effective_user.id
        text = update.message.text
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤–µ–¥—ë–º –ª–∏ –º—ã –¥–∏–∞–ª–æ–≥ —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
        if user_id not in self.user_states:
            await update.message.reply_text(
                "–ü–æ–Ω—è–ª! –ê –∫–∞–∫ –Ω–∞—Å—á—ë—Ç –≤–µ—á–µ—Ä–Ω–µ–π —Ä–µ—Ñ–ª–µ–∫—Å–∏–∏? üòä\n\n–ù–∞–ø–∏—à–∏ /reflect —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –Ω–∞—à –¥–∏–∞–ª–æ–≥!\n\n–ò–ª–∏ –∑–∞–≥–ª—è–Ω–∏ –≤ —Å–≤–æ–π /diary üìñ"
            )
            return
        
        user_state = self.user_states[user_id]
        current_state = user_state['dialog_state']
        reflection = user_state['current_reflection']
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–≤–µ—Ç –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–µ–∫—É—â–µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        if current_state == DialogState.WAITING_BEST_MOMENT:
            reflection.best_moment = text
            response = f"–ü—Ä–µ–∫—Ä–∞—Å–Ω–æ! üåü\n\n–ó–∞–ø–∏—Å–∞–ª: \"{text}\""
            
        elif current_state == DialogState.WAITING_GRATITUDE:
            reflection.gratitude = text
            response = f"–ö–∞–∫ –≤–∞–∂–Ω–æ –ø–æ–º–Ω–∏—Ç—å –æ –±–ª–∞–≥–æ–¥–∞—Ä–Ω–æ—Å—Ç–∏! üíõ\n\n–ó–∞–ø–∏—Å–∞–ª: \"{text}\""
            
        elif current_state == DialogState.WAITING_RATING:
            # –ò—â–µ–º —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 10
            import re
            rating_match = re.search(r'\b([1-9]|10)\b', text)
            if rating_match:
                reflection.day_rating = int(rating_match.group(1))
                rating_emoji = "üí™" if reflection.day_rating >= 7 else "üíô" if reflection.day_rating >= 5 else "ü´Ç"
                response = f"–ü–æ–Ω—è–ª - {reflection.day_rating}/10 {rating_emoji}\n\n–ó–∞–ø–∏—Å–∞–ª: \"{text}\""
            else:
                response = f"–ó–∞–ø–∏—Å–∞–ª —Ç–≤–æ–π –æ—Ç–≤–µ—Ç! üìù\n\n\"{text}\"\n\n(–ï—Å–ª–∏ —Ö–æ—á–µ—à—å —É–∫–∞–∑–∞—Ç—å —Ç–æ—á–Ω—É—é –æ—Ü–µ–Ω–∫—É —á–∏—Å–ª–æ–º –æ—Ç 1 –¥–æ 10, –º–æ–∂–µ—à—å –¥–æ–±–∞–≤–∏—Ç—å)"
                
        elif current_state == DialogState.WAITING_TOMORROW:
            reflection.tomorrow_focus = text
            response = f"–û—Ç–ª–∏—á–Ω—ã–µ –ø–ª–∞–Ω—ã! üéØ\n\n–ó–∞–ø–∏—Å–∞–ª: \"{text}\""
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–ª–µ–¥—É—é—â–∏–π —à–∞–≥
        if current_state in self.dialog_questions:
            next_state = self.dialog_questions[current_state]['next_state']
            
            if next_state == DialogState.COMPLETED:
                # –ó–∞–≤–µ—Ä—à–∞–µ–º –¥–∏–∞–ª–æ–≥
                self.save_reflection(reflection)
                del self.user_states[user_id]
                
                completion_message = f"""{response}

‚ú® **–î–ï–ù–¨ –ó–ê–í–ï–†–®–Å–ù!**

–°–ø–∞—Å–∏–±–æ –∑–∞ –∏—Å–∫—Ä–µ–Ω–Ω–∏–π —Ä–∞–∑–≥–æ–≤–æ—Ä! –í—Å–µ —Ç–≤–æ–∏ –º—ã—Å–ª–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ –¥–Ω–µ–≤–Ω–∏–∫ —Å –¥–∞—Ç–æ–π {datetime.now().strftime('%d.%m.%Y')}.

üìñ –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–≤–æ–∏ –∑–∞–ø–∏—Å–∏: /diary
üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –Ω–µ–¥–µ–ª–∏: /analytics

–£–≤–∏–¥–∏–º—Å—è –∑–∞–≤—Ç—Ä–∞ –≤–µ—á–µ—Ä–æ–º –¥–ª—è –Ω–æ–≤–æ–≥–æ –¥–∏–∞–ª–æ–≥–∞! üíõ

–°–ª–∞–¥–∫–∏—Ö —Å–Ω–æ–≤! üåô"""
                
                await update.message.reply_text(completion_message)
                
            else:
                # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –≤–æ–ø—Ä–æ—Å—É
                user_state['dialog_state'] = next_state
                next_question = self.dialog_questions[next_state]['question']
                
                keyboard = [[InlineKeyboardButton("–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å —ç—Ç–æ—Ç –≤–æ–ø—Ä–æ—Å", callback_data="skip_question")]]
                reply_markup = InlineKeyboardMarkup(keyboard)
                
                full_message = f"{response}\n\n{next_question}"
                
                await update.message.reply_text(full_message, reply_markup=reply_markup)
    
    async def handle_callback(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ inline –∫–Ω–æ–ø–æ–∫"""
        query = update.callback_query
        user_id = query.from_user.id
        
        if query.data == "skip_question":
            if user_id not in self.user_states:
                await query.answer("–î–∏–∞–ª–æ–≥ —É–∂–µ –∑–∞–≤–µ—Ä—à—ë–Ω")
                return
                
            user_state = self.user_states[user_id]
            current_state = user_state['dialog_state']
            
            # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –≤–æ–ø—Ä–æ—Å—É
            if current_state in self.dialog_questions:
                next_state = self.dialog_questions[current_state]['next_state']
                
                if next_state == DialogState.COMPLETED:
                    # –ó–∞–≤–µ—Ä—à–∞–µ–º –¥–∏–∞–ª–æ–≥
                    reflection = user_state['current_reflection']
                    self.save_reflection(reflection)
                    del self.user_states[user_id]
                    
                    await query.answer()
                    await query.edit_message_text(
                        f"–•–æ—Ä–æ—à–æ, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º! ‚ú®\n\n–î–µ–Ω—å –∑–∞–≤–µ—Ä—à—ë–Ω. –°–ø–∞—Å–∏–±–æ –∑–∞ —Ä–∞–∑–≥–æ–≤–æ—Ä!\n\n–í—Å–µ –æ—Ç–≤–µ—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ –¥–Ω–µ–≤–Ω–∏–∫ —Å –¥–∞—Ç–æ–π {datetime.now().strftime('%d.%m.%Y')}.\n\nüìñ –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –¥–Ω–µ–≤–Ω–∏–∫: /diary\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: /analytics\n\n–£–≤–∏–¥–∏–º—Å—è –∑–∞–≤—Ç—Ä–∞! üíõ"
                    )
                    
                else:
                    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –≤–æ–ø—Ä–æ—Å—É
                    user_state['dialog_state'] = next_state
                    next_question = self.dialog_questions[next_state]['question']
                    
                    keyboard = [[InlineKeyboardButton("–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å —ç—Ç–æ—Ç –≤–æ–ø—Ä–æ—Å", callback_data="skip_question")]]
                    reply_markup = InlineKeyboardMarkup(keyboard)
                    
                    await query.answer()
                    await query.edit_message_text(
                        f"–•–æ—Ä–æ—à–æ, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º! ‚ú®\n\n{next_question}",
                        reply_markup=reply_markup
                    )
    
    async def send_daily_reflection(self):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–π —Ä–µ—Ñ–ª–µ–∫—Å–∏–∏ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º"""
        conn = sqlite3.connect(DATABASE_PATH)
        cursor = conn.cursor()
        
        cursor.execute('SELECT user_id FROM users')
        users = cursor.fetchall()
        conn.close()
        
        for (user_id,) in users:
            try:
                await self.start_reflection_dialog(user_id, user_id)
                
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ daily reflection –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")
    
    async def send_weekly_analytics(self):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ–π –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º"""
        conn = sqlite3.connect(DATABASE_PATH)
        cursor = conn.cursor()
        
        cursor.execute('SELECT user_id FROM users')
        users = cursor.fetchall()
        conn.close()
        
        for (user_id,) in users:
            try:
                analytics = self.generate_weekly_analytics(user_id)
                await self.application.bot.send_message(chat_id=user_id, text=analytics)
                
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ weekly analytics –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")
    
    async def setup_application(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
        self.application = Application.builder().token(self.token).build()
        
        # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
        self.application.add_handler(CommandHandler("start", self.start_command))
        self.application.add_handler(CommandHandler("reflect", self.reflect_command))
        self.application.add_handler(CommandHandler("diary", self.diary_command))
        self.application.add_handler(CommandHandler("analytics", self.analytics_command))
        self.application.add_handler(CommandHandler("help", self.help_command))
        self.application.add_handler(CallbackQueryHandler(self.handle_callback))
        self.application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, self.handle_message))
        
        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –º–µ–Ω—é –∫–æ–º–∞–Ω–¥
        await self.setup_bot_commands()
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞
        self.scheduler.add_job(
            self.send_daily_reflection,
            CronTrigger(hour=23, minute=0),
            id='daily_reflection'
        )
        
        self.scheduler.add_job(
            self.send_weekly_analytics,
            CronTrigger(day_of_week=6, hour=20, minute=0),  # –í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ –≤ 20:00
            id='weekly_analytics'
        )
    
    async def run(self):
        """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
        await self.setup_application()
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫
        self.scheduler.start()
        logger.info("–ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∑–∞–ø—É—â–µ–Ω")
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
        logger.info("–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞...")
        await self.application.initialize()
        await self.application.start()
        await self.application.updater.start_polling()
        
        try:
            # –î–µ—Ä–∂–∏–º –±–æ—Ç–∞ –≤ —Ä–∞–±–æ—Ç–µ
            while True:
                await asyncio.sleep(1)
        except KeyboardInterrupt:
            logger.info("–ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –æ—Å—Ç–∞–Ω–æ–≤–∫–∏")
        finally:
            # –ö–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∞
            self.scheduler.shutdown()
            await self.application.updater.stop()
            await self.application.stop()
            await self.application.shutdown()

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    bot = ReflectionBot(BOT_TOKEN)
    
    try:
        asyncio.run(bot.run())
    except KeyboardInterrupt:
        print("üëã –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")

if __name__ == "__main__":
    main()